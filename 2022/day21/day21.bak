def reduce!(monkeys)
  begin
    changed = false
    monkeys.each_value do |value|
      value.gsub! /\b(?!humn)[a-z]\w*\b/ do
        changed = "(#{monkeys[$&]})"
      end
    end
  end while changed
end

$stdin = open 'day21.txt'

monkeys = $stdin.map { _1.gsub(/\s/, '').split ':' }.to_h

# part1 = monkeys.dup
# reduce! part1
# puts eval part1['root']

monkeys['root'].gsub!(/[-+*\/]/, '==')
monkeys.delete 'humn'
reduce! monkeys

class Eq
  def initialize(l,r,o) = (@l,@r,@o = l,r,o)
  def -@ = Eq.new(self, -1, :*)
  def +(r) = Eq.new(self, -r, :+)
  def -(r) = Eq.new(self,  r, :+)
  def *(r) = Eq.new(self, (r.d rescue 1r/r), :*)
  def /(r) = Eq.new(self, r, :*)
  # def /(r) = Eq.new(#Eq.new(self, r, :*)

  def coerce(r) = [self, R.new(r)]
  def invert(r)
    @l.invert @r.send(@o, r)
  end
  alias == invert
end
class R < Eq
  def d =1r/@v
  def -@ = -@v
  def initialize(v) @v=v end
  def +(r) = @v-r
  def *(r) = @v/r
end

humn = Class.new(Eq){def initialize =nil; def invert(r)=$x=r}.new
p eval(monkeys['root'])
fail unless eval('humn + 5 == 2').tap { p _1 } == -3
fail unless eval('5 + humn == 2').tap { p _1 } == -3
fail unless eval('humn - 5 == 2').tap { p _1 } == 7
fail unless eval('5 - humn == 2').tap { p _1 } == 3
fail unless eval('humn * 6 == 2').tap { p _1 } == 1/3r
fail unless eval('6 * humn == 2').tap { p _1 } == 1/3r
fail unless eval('humn / 6 == 2').tap { p _1 } == 12
fail unless eval('6 / humn == 2').tap { p _1 } == 3

# p eval('humn * 9 == 2')
# p eval('9 * humn == 2')
# p eval('humn / 10 == 2')
# p eval('10 / humn == 2')

# p eval('humn + 10 == 2')
# p eval('10 + humn == 2')

# p eval('humn / 10').invert(2)
# p eval 'humn / 10'
# Eq.new('humn', 4, '+')
# p monkeys

# eq = monkeys['root']
# p eq
# __END__
# loop do
#   eq.gsub!(/\((\d+)\)/, '\1') and next
#   eq.gsub!(/(\d+)([-+*\/])(\d+)/){ $1.to_i.send $2, $3.to_i } and next
#   eq.gsub!(/(?<g>\(())/
#   break
# end
# p eq
# p input['root'].gsub(/\s/, '')
fail unless eval monkeys['root'].gsub(/\s/, '').sub('humn', '3769668716709')
