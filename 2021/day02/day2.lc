import "../shared.lc"

struct Submarine {
	horiz: num,
	depth: num,
	aim: num
}

enum Direction {
	Forward: num,
	Up: num,
	Down: num
}

fn Direction_from(line: str): Direction {
	let parts = line.split(' ')
	let which = parts[0][0]
	let num = parts[1].to_num()

	if which == 'f' {
		return Direction::Forward { _: num }
	}

	if which == 'u' {
		return Direction::Up { _: num }
	}

	if which == 'd' {
		return Direction::Down { _: num }
	}

	do abort("invalid which: " + which)
}

fn Submarine.move1(dir: Direction) {
	switch dir {
		case f: Direction::Forward { set self.horiz = self.horiz + f._; }
		case d: Direction::Down { set self.depth = self.depth + d._; }
		case u: Direction::Up { set self.depth = self.depth - u._; }
	}
}

fn Submarine.move2(dir: Direction) {
	switch dir {
		case f: Direction::Forward {
			set self.horiz = self.horiz + f._
			set self.depth = self.depth + self.aim * f._
		}
		case d: Direction::Down { set self.aim = self.aim + d._; }
		case u: Direction::Up { set self.aim = self.aim - u._; }
	}
}

fn Submarine.position(): num {
	return self.horiz * self.depth
}

fn main(): num {
	let lines = io_open("day2.txt", "r").lines()

	let sub1: Submarine = Submarine{horiz: 0, depth: 0}
	let sub2: Submarine = Submarine{horiz: 0, depth: 0, aim: 0}

	let i = 0
	while i < lines.len() {
		let dir = Direction_from(lines[i])
		do sub1.move1(dir)
		do sub2.move2(dir)
		set i = i + 1
	}

	do println("part1: " + sub1.position().to_str())
	do println("part2: " + sub2.position().to_str())

	return 0;
}

