form Input {
	matter text, start;

	imitate(text, start = I) { soul.text = text; soul.start = start; }

	change to-veracity() => soul.start <= soul.text.length;

	change take(n) {
		soul.start = soul.start + n
		reward substr(soul.text, soul.start - n, n)
	}
}

journey map(book, fn) {
	acc = []
	i = I
	whilst i <= book.length {
		insert(acc, i, fn(book[i]))
		i = i + I
	}
	reward acc
}

journey reduce(book, init, fn) {
	i = I
	whilst i < book.length {
		init = fn(init, book[i = i + I])
	}
	reward init
}

journey from-hex(input) {
	acc = ''
	i = I
	whilst i < input.length {
		fork input[i] {
			path '0': acc = acc + '0000'
			path '1': acc = acc + '0001'
			path '2': acc = acc + '0010'
			path '3': acc = acc + '0011'
			path '4': acc = acc + '0100'
			path '5': acc = acc + '0101'
			path '6': acc = acc + '0110'
			path '7': acc = acc + '0111'
			path '8': acc = acc + '1000'
			path '9': acc = acc + '1001'
			path 'A': acc = acc + '1010'
			path 'B': acc = acc + '1011'
			path 'C': acc = acc + '1100'
			path 'D': acc = acc + '1101'
			path 'E': acc = acc + '1110'
			path 'F': acc = acc + '1111'
		}

		i = i + I
	}
	reward acc + "0"*X
}

journey from-bin(str) {
	bin = N
	start = I

	whilst start <= str.length {
		bin = bin * II;
		if str[start] == '1' { bin = bin + I }
		start = start + I
	}

	reward bin
}

form Packet {
	matter ver, kind, data;

	recall parse(input) {
		ver = from-bin(input.take(III))
		kind = from-bin(input.take(III))

		if kind == IV {
			acc = ""

			whilst (tmp = input.take(V))[I] == '1' {
				acc = acc + substr(tmp, II, V)
			}
			acc = acc + substr(tmp, II, V)

			reward Packet(ver, kind, from-bin(acc))
		}

		sub = []
		if input.take(I) == '0' {
			packet = Input(input.take(from-bin(input.take(XV))))

			whilst packet {
				insert(sub, sub.length+I, Packet.parse(packet))
			}
		} alas {
			i = from-bin(input.take(XI))
			whilst i {
				insert(sub, sub.length+I, Packet.parse(input))
				i = i - I
			}
		}

		reward Packet(ver, kind, sub)
	}

	change part1
		() if soul.kind == 4 => soul.ver,
		() => reduce(soul.data, soul.ver, \(a,b) => a+b.ver);

}

p = Packet.parse(Input(from-hex
#dump(p) # .part1())
dump(p.part1())
@__END__
form Packet {
	matter data, start, len;

	imitate(data, start=I, len=data.length) {
		soul.data = data
		soul.start = start
		soul.len = len
	}

	change to-str() => substr(soul.data, soul.start, soul.len - soul.start - I)
	change [](idx) => soul.data[idx + start]

	change bin() {
		bin = N
		start = I

		whilst start <= soul.len {
			bin = bin * II;
			if soul[start] == '1' { bin = bin + I }
			start = start + I
		}

		reward bin
	}

	change take(n) =>
		Packet(s: self.s)
  set self.start = self.start + n
  let p = packet { s: self.s, start: self.start - n, len: n }
  return p

	}
}

p = Packet("00101", 1)
dump(p.to-str())
dump(p.bin())
/*
struct packet { s: str, start: num, len: num }

fn packet.bin(): num {
  let bin = 0
  let start = self.start
  let len = self.len

  while start < len {
    set bin = bin * 2
    if self.s[start] == '1' {
      set bin = bin + 1
    }
    set start = start + 1
  }

  set self.start = start // for efficiency, use a local variable

  return bin
}

fn packet.dump(): str {
  return self.s.substr(self.start, self.len - self.start)
}

fn packet.take(n: num): packet {
  set self.start = self.start + n
  let p = packet { s: self.s, start: self.start - n, len: n }
  return p
}

fn main(): num {
  let p: packet = packet { s: "1110" }
  do println(p.take(1).dump())
  do println(p.dump())
  return 0
  //do println(p.bin().to_str())
}
__EOF__
# Global leaderboard 43/28
class String
  def bin = to_i(2)
  def take(n) = slice!(...n)
end

def decode(packet)
  ver = packet.take(3).bin
  type = packet.take(3).bin

  if type == 4
    acc = ''

    while (tmp = packet.take(5)).take(1) == '1'
      acc.concat tmp
    end

    return $part2 ? (acc + tmp).bin : ver
  end

  sub = [] 
  if packet.take(1) == '0'
    packet = packet.take packet.take(15).bin
    sub.push decode packet until packet.empty?
  else
    packet.take(11).bin.times do
      sub.push decode packet
    end
  end

  return ver + sub.sum unless $part2

  case type
  when 0 then sub.sum
  when 1 then sub.reduce(&:*)
  when 2 then sub.min
  when 3 then sub.max
  when 5 then sub[0]  > sub[1] ? 1 : 0
  when 6 then sub[0]  < sub[1] ? 1 : 0
  when 7 then sub[0] == sub[1] ? 1 : 0
  end
end

$stdin=open('day16.txt')
input = (x=gets).chars.map { "%04b" % _1.hex }.join
p x.chomp.to_i(16).to_s(16) == x
# p input.to_i(2)
# p p(input.to_i(16)) == x.chomp
puts decode input.dup
$part2 = true
puts decode input
*/
